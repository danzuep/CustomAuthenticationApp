@page "/authentication/profile"
@using System.Text.Json
@using System.Security.Claims
@layout MainLayout
@inject IAuthenticationService AuthenticatedUser
@inject IJSRuntime JsRuntime

<PageTitle>Profile</PageTitle>

<div class="card">
    <div class="card-header">
        <h1 class="h2 text-center">User Profile for <b>@AuthenticatedUser.Identity.Name</b></h1>
    </div>
    <div class="card-body">
        <b>User token:</b>
        <input type="text" readonly value=@AuthenticatedUser.Identity.Jwt />
        <CopyButton TextToCopy=@AuthenticatedUser.Identity.Jwt />
        <button class=@CopyButton.DefaultClass @onclick=@OnClickDecode>Decode</button>
        @if (AuthenticatedUser.Identity.ValidTo != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Current time</th>
                        @if (AuthenticatedUser.Identity.ValidFrom.HasValue)
                        {
                            <th>Access token start</th>
                        }
                        <th>Access token expiry</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@DateTimeOffset.Now</td>
                        @if (AuthenticatedUser.Identity.ValidFrom.HasValue)
                        {
                        <td>@AuthenticatedUser.Identity.ValidFrom.Value.ToLocalTime()</td>
                        }
                        <td>@AuthenticatedUser.Identity.ValidTo.Value.ToLocalTime()</td>
                    </tr>
                </tbody>
            </table>
        }

        @if (AuthenticatedUser.Identity.Claims.Any())
        {
            if (!string.IsNullOrEmpty(AuthenticatedUser.Identity.ClaimsIdentity.Name))
            {
                <h2>Profile Name</h2>
                <ul><li>@AuthenticatedUser.Identity.ClaimsIdentity.Name</li></ul>
            }
            if (AuthenticatedUser.Identity.Roles.Any())
            {
                <h2>User Roles</h2>
                <ul>
                    @foreach (var role in AuthenticatedUser.Identity.Roles)
                    {
                        <li class="role">@role</li>
                    }
                </ul>
            }
        }
    </div>
</div>

@code {
    private async Task OnClickDecode()
    {
        await JsRuntime.InvokeVoidAsync(CopyButton.Copy, AuthenticatedUser.Identity.Jwt);
        await JsRuntime.InvokeVoidAsync("window.open", "https://jwt.ms/", "_blank");
    }
}